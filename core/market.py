from abc import abstractmethod, ABC
from typing import Optional

import pandas as pd
import datetime as dt

from BacktestingEngine.core.execution import ExecutionModel
from BacktestingEngine.core.order import Order, Trade
from BacktestingEngine.core.typedefs import Price
from core.logger import logger


class Market(ABC):
    """Abstract base class for market"""
    @abstractmethod
    def get_timestamps(self):
        pass

    @abstractmethod
    def get_price(self, timestamp: dt.datetime):
        pass

    @abstractmethod
    def execute_order(self, timestamp: pd.Timestamp, order: Order):
        pass


class SingleInstrumentMarket(Market):
    """ Simple single instrument market,
         supports an execution model, contains data and can execute orders
         generated by the portfolio2

    """
    def __init__(self,
                 symbol: str,
                 data: pd.DataFrame,
                 execution_model: ExecutionModel):
        self.data: pd.DataFrame = data
        self.symbol: str = symbol
        self.timestamps: pd.Timestamp = data.index
        self.execution_model = execution_model

    def get_timestamps(self) -> pd.Timestamp:
        return self.timestamps

    def get_price(self, timestamp: pd.Timestamp) -> Price:
        return self.data.loc[timestamp].values[0]

    def execute_order(self,timestamp: pd.Timestamp, order: Order) -> Trade:
        current_market_price = self.get_price(timestamp)
        return self.execution_model.fill(order,timestamp,current_market_price)







